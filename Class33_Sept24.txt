+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
CRUD API using Class Based View in Django REST Framework :(restapidemo5)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from django.db import models

# Create your models here.
class Student(models.Model):
 name= models.CharField(max_length=100)
 roll = models.IntegerField()
 city= models.CharField(max_length=100)
------------------------------------------------------------------------------------------
from django.contrib import admin
from .models import Student
# Register your models here.

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
 list_display = ['id', 'name', 'roll', 'city']
------------------------------------------------------------------------------------------
from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.Serializer):
 name= serializers.CharField(max_length=100)
 roll = serializers.IntegerField()
 city= serializers.CharField(max_length=100)

 def create(self, validated_data):
  return Student.objects.create(**validated_data)

 def update(self, instance, validated_data):
  # print(instance.name)
  instance.name = validated_data.get('name', instance.name)
  # print(instance.name)
  instance.roll = validated_data.get('roll', instance.roll)
  instance.city = validated_data.get('city', instance.city)
  instance.save()
  return instance
------------------------------------------------------------------------------------------
from django.shortcuts import render
import io
from rest_framework.parsers import JSONParser
from .models import Student
from .serializers import StudentSerializer
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

@method_decorator(csrf_exempt, name='dispatch')
class StudentAPI(View):
 def get(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id', None)
  if id is not None:
   stu = Student.objects.get(id=id)
   serializer = StudentSerializer(stu)
   json_data = JSONRenderer().render(serializer.data)
   return HttpResponse(json_data, content_type='application/json')

  stu = Student.objects.all()
  serializer = StudentSerializer(stu, many=True)
  json_data = JSONRenderer().render(serializer.data)
  return HttpResponse(json_data, content_type='application/json')

 def post(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  serializer = StudentSerializer(data = pythondata)
  if serializer.is_valid():
   serializer.save()
   res = {'msg': 'Data Created'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def put(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  #  Complete Update - Required All Data from Front End/Client
  #  serializer = StudentSerializer(stu, data=pythondata) 
  #  Partial Update - All Data not required
  serializer = StudentSerializer(stu, data=pythondata, partial=True)
  if serializer.is_valid():
   serializer.save()
   res = {'msg':'Data Updated !!'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def delete(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  stu.delete()
  res = {'msg': 'Data Deleted!!'}
  # json_data = JSONRenderer().render(res)
  # return HttpResponse(json_data, content_type='application/json')
  return JsonResponse(res, safe=False)
------------------------------------------------------------------------------------------
import requests
import json

URL = "http://127.0.0.1:8000/studentapi/"

def get_data(id = None):
 data = {}
 if id is not None:
  data = {'id':id}
 json_data = json.dumps(data)
 r = requests.get(url = URL, data = json_data)
 data = r.json()
 print(data)

# get_data()

def post_data():
 data = {
  'name':'Ravi',
  'roll':104,
  'city': 'Dhanbad'
 }

 json_data = json.dumps(data)
 r = requests.post(url = URL, data = json_data)
 data = r.json()
 print(data)

# post_data()

def update_data():
 data = {
  'id': 5,
  'name':'Jack',
  'city': 'Ranchi'
 }

 json_data = json.dumps(data)
 r = requests.put(url = URL, data = json_data)
 data = r.json()
 print(data)

# update_data()


def delete_data():
 data = { 'id': 5 }

 json_data = json.dumps(data)
 r = requests.delete(url = URL, data = json_data)
 data = r.json()
 print(data)

delete_data()



------------------------------------------------------------------------------------------

from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/', views.StudentAPI.as_view()),
]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Field Level Validation & Object Level Validation:(restapidemo6)


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from django.db import models

# Create your models here.
class Student(models.Model):
 name= models.CharField(max_length=100)
 roll = models.IntegerField()
 city= models.CharField(max_length=100)

------------------------------------------------------------------------------------------
from django.contrib import admin
from .models import Student
# Register your models here.

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
 list_display = ['id', 'name', 'roll', 'city']

------------------------------------------------------------------------------------------
from rest_framework import serializers
from .models import Student

# Validators
def start_with_r(value):
 if value[0].lower() != 'r':
  raise serializers.ValidationError('Name should be start with R')

class StudentSerializer(serializers.Serializer):
 name= serializers.CharField(max_length=100, validators=[start_with_r])
 roll = serializers.IntegerField()
 city= serializers.CharField(max_length=100)

 def create(self, validated_data):
  return Student.objects.create(**validated_data)

 def update(self, instance, validated_data):
  # print(instance.name)
  instance.name = validated_data.get('name', instance.name)
  # print(instance.name)
  instance.roll = validated_data.get('roll', instance.roll)
  instance.city = validated_data.get('city', instance.city)
  instance.save()
  return instance

 # Field Lavel Validation
 def validate_roll(self, value):
  if value >= 200:
   raise serializers.ValidationError('Seat Full')
  return value

 # Object Level Validation
 def validate(self, data):
  nm = data.get('name')
  ct = data.get('city')
  if nm.lower() == 'rohit' and ct.lower() != 'ranchi':
   raise serializers.ValidationError('City must be Ranchi')
  return data


------------------------------------------------------------------------------------------
from django.shortcuts import render
import io
from rest_framework.parsers import JSONParser
from .models import Student
from .serializers import StudentSerializer
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

@method_decorator(csrf_exempt, name='dispatch')
class StudentAPI(View):
 def get(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id', None)
  if id is not None:
   stu = Student.objects.get(id=id)
   serializer = StudentSerializer(stu)
   json_data = JSONRenderer().render(serializer.data)
   return HttpResponse(json_data, content_type='application/json')

  stu = Student.objects.all()
  serializer = StudentSerializer(stu, many=True)
  json_data = JSONRenderer().render(serializer.data)
  return HttpResponse(json_data, content_type='application/json')

 def post(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  serializer = StudentSerializer(data = pythondata)
  if serializer.is_valid():
   serializer.save()
   res = {'msg': 'Data Created'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def put(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  #  Complete Update - Required All Data from Front End/Client
  #  serializer = StudentSerializer(stu, data=pythondata) 
  #  Partial Update - All Data not required
  serializer = StudentSerializer(stu, data=pythondata, partial=True)
  if serializer.is_valid():
   serializer.save()
   res = {'msg':'Data Updated !!'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def delete(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  stu.delete()
  res = {'msg': 'Data Deleted!!'}
  # json_data = JSONRenderer().render(res)
  # return HttpResponse(json_data, content_type='application/json')
  return JsonResponse(res, safe=False)

------------------------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/', views.StudentAPI.as_view()),
]


------------------------------------------------------------------------------------------

import requests
import json

URL = "http://127.0.0.1:8000/studentapi/"

def get_data(id = None):
 data = {}
 if id is not None:
  data = {'id':id}
 json_data = json.dumps(data)
 r = requests.get(url = URL, data = json_data)
 data = r.json()
 print(data)

# get_data()

def post_data():
 data = {
  'name':'rohan',
  'roll':124,
  'city': 'bokaro'
 }

 json_data = json.dumps(data)
 r = requests.post(url = URL, data = json_data)
 data = r.json()
 print(data)

post_data()

def update_data():
 data = {
  'id': 5,
  'name':'Jack',
  'city': 'Ranchi'
 }

 json_data = json.dumps(data)
 r = requests.put(url = URL, data = json_data)
 data = r.json()
 print(data)

# update_data()


def delete_data():
 data = { 'id': 5 }

 json_data = json.dumps(data)
 r = requests.delete(url = URL, data = json_data)
 data = r.json()
 print(data)

# delete_data()


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Model Serializer in Django REST Framework  :

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

from django.db import models

# Create your models here.
class Student(models.Model):
 name= models.CharField(max_length=100)
 roll = models.IntegerField()
 city= models.CharField(max_length=100)

------------------------------------------------------------------------------------------
from django.contrib import admin
from .models import Student
# Register your models here.

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
 list_display = ['id', 'name', 'roll', 'city']

------------------------------------------------------------------------------------------
from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.ModelSerializer):
 class Meta:
  model = Student
  fields = ['name', 'roll', 'city']


------------------------------------------------------------------------------------------
from django.shortcuts import render
import io
from rest_framework.parsers import JSONParser
from .models import Student
from .serializers import StudentSerializer
from rest_framework.renderers import JSONRenderer
from django.http import HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

@method_decorator(csrf_exempt, name='dispatch')
class StudentAPI(View):
 def get(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id', None)
  if id is not None:
   stu = Student.objects.get(id=id)
   serializer = StudentSerializer(stu)
   json_data = JSONRenderer().render(serializer.data)
   return HttpResponse(json_data, content_type='application/json')

  stu = Student.objects.all()
  serializer = StudentSerializer(stu, many=True)
  json_data = JSONRenderer().render(serializer.data)
  return HttpResponse(json_data, content_type='application/json')

 def post(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  serializer = StudentSerializer(data = pythondata)
  if serializer.is_valid():
   serializer.save()
   res = {'msg': 'Data Created'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def put(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  #  Complete Update - Required All Data from Front End/Client
  #  serializer = StudentSerializer(stu, data=pythondata) 
  #  Partial Update - All Data not required
  serializer = StudentSerializer(stu, data=pythondata, partial=True)
  if serializer.is_valid():
   serializer.save()
   res = {'msg':'Data Updated !!'}
   json_data = JSONRenderer().render(res)
   return HttpResponse(json_data, content_type='application/json')
  json_data = JSONRenderer().render(serializer.errors)
  return HttpResponse(json_data, content_type='application/json')

 def delete(self, request, *args, **kwargs):
  json_data = request.body
  stream = io.BytesIO(json_data)
  pythondata = JSONParser().parse(stream)
  id = pythondata.get('id')
  stu = Student.objects.get(id=id)
  stu.delete()
  res = {'msg': 'Data Deleted!!'}
  # json_data = JSONRenderer().render(res)
  # return HttpResponse(json_data, content_type='application/json')
  return JsonResponse(res, safe=False)

------------------------------------------------------------------------------------------
from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/', views.StudentAPI.as_view()),
]


------------------------------------------------------------------------------------------
import requests
import json

URL = "http://127.0.0.1:8000/studentapi/"

def get_data(id = None):
 data = {}
 if id is not None:
  data = {'id':id}
 json_data = json.dumps(data)
 r = requests.get(url = URL, data = json_data)
 data = r.json()
 print(data)

# get_data()

def post_data():
 data = {
  'name':'Sonal',
  'roll':108,
  'city': 'Dhanbad'
 }

 json_data = json.dumps(data)
 r = requests.post(url = URL, data = json_data)
 data = r.json()
 print(data)

# post_data()

def update_data():
 data = {
  'id': 6,
  'name':'Jack',
  'city': 'Ranchi'
 }

 json_data = json.dumps(data)
 r = requests.put(url = URL, data = json_data)
 data = r.json()
 print(data)

# update_data()


def delete_data():
 data = { 'id': 6 }

 json_data = json.dumps(data)
 r = requests.delete(url = URL, data = json_data)
 data = r.json()
 print(data)

delete_data()


------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
	