Session based Auth: <=> restapidemo13
===================
With session-based auth, a session is generated and the ID is stored in a cookie.
After logging in, the server validates the credentials. 
If valid, it generates a session, stores it, and then sends the session ID back to the browser. 
The browser stores the session ID as a cookie, which gets sent anytime a request is made to the server.

Session-based auth is stateful. 

Each time a client requests the server, the server must locate the session in memory in order to tie 
the session ID back to the associated user.


python manage.py makemigrations

python manage.py migrate

python manage.py createsuperuser --username chanti --email chanti@gmail.com

python manage.py runserver

try this endpoint on url & click on login

http://127.0.0.1:8000/studentapi/

username : chanti
password : chanti

===============================================================================================

AllowAny

The AllowAny permission class will allow unrestricted access, regardless of if the request was 
authenticated or unauthenticated.
This permission is not strictly required, since you can achieve the same result by using an empty 
list or tuple for the permissions setting, but you may find it useful to specify this class because 
it makes the intention explicit.


IsAuthenticated

The IsAuthenticated permission class will deny permission to any unauthenticated user, and allow permission 
otherwise.
This permission is suitable if you want your API to only be accessible to registered users.


IsAdminUser

The IsAdminUser permission class will deny permission to any user, 
unless user.is_staff is True in which case permission will be allowed.
This permission is suitable if you want your API to only be accessible to a subset of trusted administrators.

IsAuthenticatedOrReadOnly

The IsAuthenticatedOrReadOnly will allow authenticated users to perform any request. 
Requests for unauthorised users will only be permitted if the request 
method is one of the "safe" methods; GET, HEAD or OPTIONS.
This permission is suitable if you want to your API to allow read permissions to anonymous users, 
and only allow write permissions to authenticated users.


DjangoModelPermissions

This permission class ties into Django's standard django.contrib.auth model permissions. 
This permission must only be applied to views that have a queryset property set. 
Authorization will only be granted if the user is authenticated and has the relevant model permissions assigned.

	POST requests require the user to have the add permission on the model.
	PUT and PATCH requests require the user to have the change permission on the model.
	DELETE requests require the user to have the delete permission on the model.

The default behaviour can also be overridden to support custom model permissions. 
For example, you might want to include a view model permission for GET requests.
To use custom model permissions, override DjangoModelPermissions and set the perms_map property.


DjangoModelPermissionsOrAnonReadOnly

Similar to DjangoModelPermissions, but also allows unauthenticated users to have read-only access to the API.

