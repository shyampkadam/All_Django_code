
Token based Authentication:
===========================
In Token based Authentication, all tokens will be stored in database tables(TableName: Tokens ).
For every request DRF will communicate with database to validate token & identify corresponding user.
This database interaction for every request creates performance issue.

To overcome this issue, we should use JWT Authentication.
The main adv of JWT Authentication is database interaction is not required to identify user.
From the token itself, DRF can identify user.

==================================================================
					JWT Authentication <=> restapidemo12
==================================================================

JWT stands for JSON Web Token and it is an authentication strategy used by client/server 
applications where the client is a Web application using JavaScript and some frontend framework like Angular, React or VueJS.


Q1.How JWT Works?


The JWT is just an authorization token that should be included in all requests.

curl http://127.0.0.1:8000/hello/ -H 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9.Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY'



The JWT is acquired by exchanging an username + password for an access token and an refresh token.
The access token is usually short-lived (expires in 5 min or so, can be customized though).
The refresh token lives a little bit longer (expires in 24 hours, also customizable). 
It is comparable to an authentication session. 
After it expires, you need a full login with username + password again.



It’s a security feature and also it’s because the JWT holds a little bit more information. 
If you look closely the example I gave above, you will see the token is composed by three parts:

xxxxx.yyyyy.zzzzz


Those are three distinctive parts that compose a JWT:

header.payload.signature


header = eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
payload = eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNTQzODI4NDMxLCJqdGkiOiI3ZjU5OTdiNzE1MGQ0NjU3OWRjMmI0OTE2NzA5N2U3YiIsInVzZXJfaWQiOjF9
signature = Ju70kdcaHKn1Qaz8H42zrOYk0Jx9kIckTn9Xx7vhikY



This information is encoded using Base64. If we decode, we will see something like this:


header

{
  "typ": "JWT",
  "alg": "HS256"
}
payload

{
  "token_type": "access",
  "exp": 1543828431,
  "jti": "7f5997b7150d46579dc2b49167097e7b",
  "user_id": 1
}
signature

The signature is issued by the JWT backend, using the header base64 + payload base64 + SECRET_KEY. 


Installation & Setup:
=====================
	pip install djangorestframework_simplejwt

settings.py:
============

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}


urls.py:
========

from django.urls import path
from rest_framework_simplejwt import views as jwt_views

urlpatterns = [
    # Your URLs...
    path('api/token/', jwt_views.TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', jwt_views.TokenRefreshView.as_view(), name='token_refresh'),
]



python manage.py makemigrations

python manage.py migrate

python manage.py createsuperuser --username chanti --email chanti@gmail.com

python manage.py runserver

http post http://127.0.0.1:8000/api/token/ username=chanti password=chanti

{
    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjMzMzY4NTc0LCJqdGkiOiI3Nzc3MWIzZDAwYzM0MWUyOTg1OWI1YzJiMGYwMWIwNyIsInVzZXJfaWQiOjF9.AwponEkoxQxztm95uJwSSjcoVhMWSmYlv88vX2dsHLE",
    "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYzMzQ1NDY3NCwianRpIjoiYjI1NzcxYjdjZWQ2NGJmOGI2ZWRkNjYzZjdjZmNlODIiLCJ1c2VyX2lkIjoxfQ.i4ToI1uujfgyrL1MhYidJkFarbCSU0_2zh16rY1a-DM"
}

In order to access the protected views on the backend (i.e., the API endpoints that require authentication),
you should include the access token in the header of all requests, like this:

http http://127.0.0.1:8000/studentapi/ "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjMzMzY5ODY5LCJqdGkiOiJmYzQ2NTIwMDIwNDc0OTg4ODYxN2Q2Mjk0NWU2OTQyYyIsInVzZXJfaWQiOjF9.Y6OQZUXCkODU_0uRttql8LQCIwdrjyGnEPo5EiN-efI"
http http://127.0.0.1:8000/hello/ "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjMzMzY5ODY5LCJqdGkiOiJmYzQ2NTIwMDIwNDc0OTg4ODYxN2Q2Mjk0NWU2OTQyYyIsInVzZXJfaWQiOjF9.Y6OQZUXCkODU_0uRttql8LQCIwdrjyGnEPo5EiN-efI" 

You can use this access token for the next five minutes.

After five min, the token will expire, and if you try to access the view again, you are going to get the following error:

Refresh Token

To get a new access token, you should use the refresh token endpoint /api/token/refresh/ posting the refresh token:

http post http://127.0.0.1:8000/api/token/refresh/ refresh=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYzMzQ1NDY3NCwianRpIjoiYjI1NzcxYjdjZWQ2NGJmOGI2ZWRkNjYzZjdjZmNlODIiLCJ1c2VyX2lkIjoxfQ.i4ToI1uujfgyrL1MhYidJkFarbCSU0_2zh16rY1a-DM


The return is a new access token that you should use in the subsequent requests.

The refresh token is valid for the next 24 hours. When it finally expires too, 
the user will need to perform a full authentication again using their username and password to 
get a new set of access token + refresh token.
