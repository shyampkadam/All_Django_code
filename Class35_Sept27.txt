views.py
========
from django.shortcuts import render
from rest_framework.decorators import api_view
from rest_framework.response import Response

# @api_view()
# def hello_world(request):
#  return Response({'msg':'Hello World'})

# @api_view(['GET'])
# def hello_world(request):
#  return Response({'msg':'Hello World'})

# @api_view(['POST'])
# def hello_world(request):
#  if request.method == "POST":
#   print(request.data)
#   return Response({'msg':'This is POST Request'})

@api_view(['GET','POST'])
def hello_world(request):
 if request.method == 'GET':
  return Response({'msg':'This is GET Request'})

 if request.method == "POST":
  print(request.data)
  return Response({'msg':'This is POST Request', 'data':request.data})
  
  
 testapi:
 ==========
 import requests
import json

URL = "http://127.0.0.1:8000/studentapi/"

def get_data(id = None):
 data = {}
 if id is not None:
  data = {'id':id}
 json_data = json.dumps(data)
 headers = {'content-Type':'application/json'}
 r = requests.get(url = URL, headers=headers, data = json_data)
 data = r.json()
 print(data)

# get_data()
==============================================================

from django.db import models

# Create your models here.
class Student(models.Model):
 name = models.CharField(max_length=50)
 roll = models.IntegerField()
 city = models.CharField(max_length=50)
_____________________________________________________________________________
 from django.contrib import admin
from .models import Student
# Register your models here.

@admin.register(Student)
class StudentAdmin(admin.ModelAdmin):
 list_display = ['id', 'name', 'roll', 'city']

_____________________________________________________________________________ 
 
from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.ModelSerializer):
 class Meta:
  model = Student
  fields = ['id', 'name', 'roll', 'city']

_____________________________________________________________________________  
 
 from django.shortcuts import render
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Student
from .serializers import StudentSerializer


from django.shortcuts import render
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Student
from .serializers import StudentSerializer
# Create your views here.

@api_view(['GET', 'POST', 'PUT', 'DELETE'])
def student_api(request):
 if request.method == 'GET':
  id = request.data.get('id')
  if id is not None:
   stu = Student.objects.get(id=id)
   serializer = StudentSerializer(stu)
   return Response(serializer.data)

  stu = Student.objects.all()
  serializer = StudentSerializer(stu, many=True)
  return Response(serializer.data)

 if request.method == 'POST':
  serializer = StudentSerializer(data=request.data)
  if serializer.is_valid():
   serializer.save()
   return Response({'msg':'Data Created'})
  return Response(serializer.errors)

 if request.method == 'PUT':
  id = request.data.get('id')
  stu = Student.objects.get(pk=id)
  serializer = StudentSerializer(stu, data=request.data, partial=True)
  if serializer.is_valid():
   serializer.save()
   return Response({'msg':'Data Updated'})
  return Response(serializer.errors)

 if request.method == 'DELETE':
  id = request.data.get('id')
  stu = Student.objects.get(pk=id)
  stu.delete()
  return Response({'msg':'Data Deleted'})

_____________________________________________________________________________

import requests
import json

URL = "http://127.0.0.1:8000/studentapi/"

def get_data(id = None):
 data = {}
 if id is not None:
  data = {'id':id}
 json_data = json.dumps(data)
 headers = {'content-Type':'application/json'}
 r = requests.get(url = URL, headers=headers, data = json_data)
 data = r.json()
 print(data)

# get_data()

def post_data():
 data = {
  'name':'Sumit',
  'roll': 104,
  'city': 'Ranchi'
 }
 headers = {'content-Type':'application/json'}

 json_data = json.dumps(data)
 r = requests.post(url = URL, headers=headers, data = json_data)
 data = r.json()
 print(data)

# post_data()

def update_data():
 data = {
  'id': 4,
  'name':'Jack',
  'city': 'Ranchi'
 }
 headers = {'content-Type':'application/json'}

 json_data = json.dumps(data)
 r = requests.put(url = URL, headers=headers, data = json_data)
 data = r.json()
 print(data)

# update_data()


def delete_data():
 data = { 'id': 4 }
 headers = {'content-Type':'application/json'}
 json_data = json.dumps(data)
 r = requests.delete(url = URL, headers=headers,  data = json_data)
 data = r.json()
 print(data)

delete_data()
_____________________________________________________________________________
HttpStatus:

   return Response({'msg':'Data Created'}, status=status.HTTP_201_CREATED)
  return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

_____________________________________________________________________________

CLASS BASED VIEWS:

from django.shortcuts import render
from rest_framework.response import Response
from .models import Student
from .serializers import StudentSerializer
from rest_framework import status
from rest_framework.views import APIView
# Create your views here.

class StudentAPI(APIView):
 def get(self, request, pk=None, format=None):
  id = pk
  if id is not None:
   stu = Student.objects.get(id=id)
   serializer = StudentSerializer(stu)
   return Response(serializer.data)

  stu = Student.objects.all()
  serializer = StudentSerializer(stu, many=True)
  return Response(serializer.data)

 def post(self, request, format=None):
  serializer = StudentSerializer(data=request.data)
  if serializer.is_valid():
   serializer.save()
   return Response({'msg':'Data Created'}, status=status.HTTP_201_CREATED)
  return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

 def put(self, request, pk, format=None):
  id = pk
  stu = Student.objects.get(pk=id)
  serializer = StudentSerializer(stu, data=request.data)
  if serializer.is_valid():
   serializer.save()
   return Response({'msg':'Complete Data Updated'})
  return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

 def delete(self, request, pk, format=None):
  id = pk
  stu = Student.objects.get(pk=id)
  stu.delete()
  return Response({'msg':'Data Deleted'})
  
_____________________________________________________________________________
from django.contrib import admin
from django.urls import path
from api import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('studentapi/', views.StudentAPI.as_view()),
    path('studentapi/<int:pk>/', views.StudentAPI.as_view()),
]

_____________________________________________________________________________



_____________________________________________________________________________


_____________________________________________________________________________



_____________________________________________________________________________


_____________________________________________________________________________


_____________________________________________________________________________


_____________________________________________________________________________


